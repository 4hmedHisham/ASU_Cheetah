#!/usr/bin/env python

import rospy
import numpy as np
import sympy as sp
import math
# import torch
import scipy.linalg
from sympy.solvers import solve
from sympy import Symbol, Eq
from sympy.solvers.solveset import linsolve
from timeit import default_timer as time
from std_msgs.msg import String
from std_msgs.msg import Float32MultiArray

# Constants
g = 9.81
Mx = 2
My = 3
Mz = 5
Fx = 8
Fy = 12
Fz = 9
hipOffset = 300.78

# Parameters:
l1 = 244.59
l2 = 208.4
initial_leg_height = 0 # from ground to joint
stride = 150
h = 100     # maximum height of trajectory
cycle_time = 0.3 # total time for each cycle
steps = 20 # number of steps 'even'
initial_distance = 0 # along x

initial_leg_height_f
stride_f = 150
h_f = 100
cycle_time_f = 0.3
initial_distance_f = 0







########################################################################################################

def imudata(data):
    Array = numpy.array(data.data)
    global lin_acc
    global Ang_acc
    lin_acc = Array[36:39]
    Ang_acc = Array[39:42]

#########################################################################################################

def leg_pos(data):
    Array2 = numpy.array(data.data)
    global 
    global 
    lin_acc = Array2[0:3]
    Ang_acc = Array2[3:6]

##########################################################################################################

# Functions:

def Get_ZMP():
    Pc = [0, 0, 0]  # Position of Com relative to origin(cg)
    G = [0, 0, -g]  # Gravity
    # Fi=[Fx,Fy,Fz]                  #Inertia Force from IMU
    Fi = np.array([Fx, Fy, Fz])
    Mi = [Mx, My, Mz]  # Inertia Moment
    Zval = 10  # this will be Z of endeffector from origin which is = Zzmp
    Xzmp, Yzmp, Zzmp = sp.symbols("Xzmp,Yzmp,Zzmp")
    Pzmp = np.array([Xzmp, Yzmp, Zzmp])  # Position of Zmp relative to origin

    A = np.cross(np.subtract(Pc, Pzmp), Fi)
    B = np.cross((np.subtract(Pc, Pzmp)), G)
    F = A + B
    eq1 = Eq(F[0])
    eq1 = eq1.subs(Zzmp, Zval)
    eq2 = Eq(F[1])
    eq2 = eq2.subs(Zzmp, Zval)
    eq3 = Eq(F[2])
    eq3 = eq3.subs(Zzmp, Zval)
    sol = solve((eq1, eq2, eq3), (Xzmp, Yzmp, Zzmp))

    return sol[Xzmp], sol[Yzmp], Zval


def Mod_contact(leg_pos1, leg_pos2_y):
    # leg_pos1 is Position of one leg relative to origin(cg)
    Pzmp = Get_ZMP()
    # Pzmp=[4,5]
    m = (Pzmp[1] - leg_pos1[1]) / (Pzmp[0] - leg_pos1[0])  # Slope of needed line
    # Solve eq y-y1=m(x-x1) with y=cons from the other leg(leg_pos2)
    X_leg = (leg_pos2_y[1] - leg_pos1[1] + m * leg_pos1[0]) / m

    return X_leg + hipOffset



def Gate_Publisher(leg_no, leg1_initial, leg2_initial, z):

    # Parameters:
    global l1
    global l2
    global initial_leg_height
    global initial_leg_height_f
    global stride
    global stride_f
    global h
    global h_f
    global cycle_time
    global cycle_time_f
    global steps
    global initial_distance
    global initial_distance_f
    sample_time = cycle_time / steps  # sample time

    if leg_no==1 or leg_no==3:    

        xnew = np.zeros([steps, 1], dtype=float)
        t = 0;
        i = 0;
        initial_distance_f = leg1_initial[0]

        for t in np.arange(0, cycle_time_f, sample_time):
            xnew[i] = (stride_f * ((t / cycle_time_f) - ((1 / (2 * np.pi)) * np.sin(2 * np.pi * (t / cycle_time_f)))) - (stride_f / 2) + stride_f / 2) + initial_distance_f
            i = i + 1;
        xnew = xnew


        tnew = np.zeros([steps, 1], dtype=float)
        i = 0;
        ynew = np.zeros([steps, 1], dtype=float)

        # First part of Ynew in peicewise
        for t in np.arange(0, cycle_time_f / 2, sample_time):
            ynew[i] = (-(h_f / (2 * np.pi)) * np.sin(((4 * np.pi) / cycle_time_f) * t) + ((2 * h_f * t) / cycle_time_f) - (h_f / 2)) + (h_f / 2) - initial_leg_height_f
            i = i + 1;

        n = (cycle_time_f / 2)
        for t in np.arange(n, cycle_time_f, sample_time):
            ynew[i] = (-(h_f / (2 * np.pi)) * np.sin(4 * np.pi - (((4 * np.pi) / cycle_time_f) * t)) - ((2 * h_f * t) / cycle_time_f) + ((3 * h_f) / 2)) + (h_f / 2) - initial_leg_height_f
            i = i + 1
        ynew = ynew

        xpub = xnew
        ypub = ynew

    elif leg_no==2 or leg_no==4:

        if z == 0:
            xnew = np.zeros([steps, 1], dtype=float)
            t = 0;
            i = 0;
            initial_distance=leg2_initial[0]

            for t in np.arange(0, cycle_time, sample_time):
                xnew[i] = (stride * ((t / cycle_time) - ((1 / (2 * np.pi)) * np.sin(2 * np.pi * (t / cycle_time)))) - (stride / 2) + stride / 2) + initial_distance
                i = i + 1;
            xnew = xnew
            tnew = np.zeros([steps, 1], dtype=float)
            i = 0;
            ynew = np.zeros([steps, 1], dtype=float)
            # First part of Ynew in peicewise

            for t in np.arange(0, cycle_time / 2, sample_time):
                ynew[i] = (-(h / (2 * np.pi)) * np.sin(((4 * np.pi) / cycle_time) * t) + ((2 * h * t) / cycle_time) - (h / 2)) + (h / 2) - initial_leg_height
                i = i + 1;

            n = (cycle_time / 2)
            for t in np.arange(n, cycle_time, sample_time):
                ynew[i] = (-(h / (2 * np.pi)) * np.sin(4 * np.pi - (((4 * np.pi) / cycle_time) * t)) - ((2 * h * t) / cycle_time) + ((3 * h) / 2)) + (h / 2) - initial_leg_height
                i = i + 1
            ynew = ynew

            xpub = xnew
            ypub = ynew

        else:

            x_moved = leg1_initial[0] - leg1_current[0]
            t_elabsed = (x_moved/stride_f) * cycle_time_f
            cycletime_required = cycle_time_f - t_elabsed
            x_current = leg2_current[0]
            y_current = leg2_current[1]
            leg1_final[0] = leg1_initial[0] + stride_f     # this is coord of the pt at end of traj for fixed leg
            leg1_final[1] = 0                              # Must be relative to cg
            leg2_final[1] = leg2_initial[1]
            x_target = Mod_contact(leg1_final ,leg2_final)    
            x_mod, y_mod, stride_mod, h_mod, cycle_time_mod, initial_distance_mod = trajectory_modification(x_current, y_current, x_target, cycletime_required)
            stride = stride_mod
            h = h_mod
            cycle_time = cycle_time_mod
            initial_distance = initial_distance_mod       #######################
            xpub, ypub = trajectory_moved(x_mod, y_mod)

            initial_distance=0                            #######################3

    return xpub, ypub


def trajectory_modification(x_current, y_current, x_target, cycle_time):
    global l1
    global l2
    global steps
    global initial_leg_height
    stride = (x_target - x_current) * 2
    h = y_current  # maximum height of the trajectory
    x_initial = x_target - stride
    initial_distance = x_initial
    sample_time = cycle_time / steps  # sample time, steps should be even

    xnew = np.zeros([steps, 1], dtype=float)
    t = 0;
    i = 0;

    for t in np.arange(0, cycle_time, sample_time):
        xnew[i] = (stride * ((t / cycle_time) - ((1 / (2 * np.pi)) * np.sin(2 * np.pi * (t / cycle_time)))) - (stride / 2) + stride / 2) + initial_distance
        i = i + 1;
    xnew = xnew
    tnew = np.zeros([steps, 1], dtype=float)
    i = 0;
    ynew = np.zeros([steps, 1], dtype=float)

    # First part of Ynew in peicewise

    for t in np.arange(0, cycle_time / 2, sample_time):
        ynew[i] = (-(h / (2 * np.pi)) * np.sin(((4 * np.pi) / cycle_time) * t) + ((2 * h * t) / cycle_time) - (h / 2)) + (h / 2) - initial_leg_height
        i = i + 1;

    n = (cycle_time / 2)
    for t in np.arange(n, cycle_time, sample_time):
        ynew[i] = (-(h / (2 * np.pi)) * np.sin(4 * np.pi - (((4 * np.pi) / cycle_time) * t)) - ((2 * h * t) / cycle_time) + ((3 * h) / 2)) + (h / 2) - initial_leg_height
        i = i + 1
    ynew = ynew

    return xnew, ynew, stride, h, cycle_time, initial_distance


def trajectory_moved(x_new_array, y_new_array):
    # changing_index = np.where(x_old_array == x_current) # if given value
    length_new = x_new_array.size
    x_to_move = np.zeros([np.int(length_new / 2), 1], dtype=float)
    y_to_move = np.zeros([np.int(length_new / 2), 1], dtype=float)
    current_index = np.int(length_new / 2)
    n = 0
    for j in range(current_index, length_new):
        x_to_move[n] = x_new_array[j]
        y_to_move[n] = y_new_array[j]
        n = n + 1
    n = 0
    return x_to_move, y_to_move




#####################################################################################################################3

# Main
def talker():
    rospy.init_node('zmp', anonymous=True)
    pub = rospy.Publisher('legdata', String, queue_size=10)
    rospy.Subscriber('fwd', Float32MultiArray, leg_pos)
    rospy.Subscriber('getter', Float32MultiArray,imudata)

    rate = rospy.Rate(10)  # 10hz
    while not rospy.is_shutdown():
        # hello_str = "hello world %s" % rospy.get_time()

        if (noBIGCHANGE)
            z = 0
        else
            z = 1




      #Get the initial legs position
      #leg1_initial[0]     x
      #leg1_initial[1]     y
      #leg2_initial[0]     x
      #leg2_initial[1]     y     

    x1 , y1 = Gate_Publisher(leg_no,leg1_initial,leg2_initial,z)
    x2 , y2 = Gate_Publisher(leg_no,leg1_initial,leg2_initial,z)

    x3 , y3 = linear_traj()
    x4 , y4 = linear_traj()

    rospy.loginfo(x1,y1,x2,y2,x3,y3,x4,x4)
    pub.publish(x1,y1,x2,y2,x3,y3,x4,x4)
    rate.sleep()


if __name__ == '__main__':
try:
    talker()
except rospy.ROSInterruptException:
    pass










